{% extends '::base.html.twig' %}

{% block stylesheets %}
    <link href="{{ asset('bundles/app/vendor/nvd3/build/nv.d3.min.css') }}" rel="stylesheet">
    {{ parent() }}
{% endblock %}

{% block javascripts_head %}
    <script src="{{ asset('bundles/app/vendor/d3/d3.min.js') }}"></script>
    <script src="{{ asset('bundles/app/vendor/nvd3/build/nv.d3.min.js') }}"></script>

    <script>
        
        var journeymonitor = {
            'refreshFunctions': {},
            'renderTestresults': function(testcaseId) {

                var requestChart;
                var timingChart;
                
                var testresults;
                
                var requestData = [
                    {'key': 'Status 200', 'values': []},
                    {'key': 'Status 400', 'values': []},
                    {'key': 'Status 500', 'values': []}
                ];

                var timingData = [
                    {'key': 'Journey duration', 'values': []}
                ];
                
                var getTimeOfRun = function(index) {
                    return testresults[index].datetimeRun.date.substring(11);
                };

                var getDateAndTimeOfRun = function(index) {
                    return testresults[index].datetimeRun.date + ' ' + testresults[index].datetimeRun.timezone;
                };

                var getExitCode = function(index) {
                    return testresults[index].exitCode;
                };

                var getId = function(index) {
                    return testresults[index].id;
                };

                // Chart with request information
                nv.addGraph(function() {
                    requestChart = nv.models.multiBarChart()
                        .duration(700)
                        .showControls(true)
                        .groupSpacing(0.2)
                        .stacked(true)
                        .noData("Loading chart data, please wait...")
                    ;

                    requestChart.color(['#5cb85c', 'orange', 'red']);

                    requestChart.xAxis
                        .tickFormat(function(index) { return getTimeOfRun(index); });

                    requestChart.xAxis.fontSize('9px');

                    requestChart.yAxis
                        .tickFormat(d3.format(',.1'));

                    d3.select('#testcase-' + testcaseId + '-requestchart svg')
                        .datum(requestData)
                        .call(requestChart);

                    requestChart.multibar.dispatch.on('elementClick', function(element) {
                        var uriTemplate = 'http://www.softwareishard.com/har/viewer/?inputUrl={{ app.request.getSchemeAndHttpHost() }}{{ path('testresult-show-har', {'testresultId': 'placeholder'}) }}';
                        window.open(
                            uriTemplate.replace('placeholder', getId(element.index)),
                            '_blank'
                        );
                    });

                    nv.utils.windowResize(requestChart.update);

                    return requestChart;
                });

                // Chart with timing information
                nv.addGraph(function() {
                    timingChart = nv.models.multiBarChart()
                        .duration(700)
                        .showControls(false)
                        .groupSpacing(0.2)
                        .stacked(true)
                        .noData("Loading chart data, please wait...")
                    ;

                    timingChart.barColor(function (d, index) {
                        if (getExitCode(index) == 0) {
                            return '#5cb85c';
                        } else if (getExitCode(index) == 2) {
                            return '#ffa500';
                        } else if (getExitCode(index) == 3) {
                            return '#ff6500';
                        } else {
                            return 'red';
                        }
                    })

                    timingChart.xAxis
                        .tickFormat(function(index) { return getTimeOfRun(index); });

                    timingChart.xAxis.fontSize('9px');

                    timingChart.yAxis
                        .tickFormat(d3.format(',.1'));

                    d3.select('#testcase-' + testcaseId + '-timingchart svg')
                        .datum(timingData)
                        .call(timingChart);

                    timingChart.tooltip.contentGenerator(function (obj) {
                        var exitCodeMessage = '';
                        if (getExitCode(obj.index) === 0) {
                            exitCodeMessage = 'All well.';
                        } else if (getExitCode(obj.index) === 2) {
                            exitCodeMessage = 'Journey not successful, expectation failed.';
                        } else if (getExitCode(obj.index) === 3) {
                            exitCodeMessage = 'Journey not successful, page element not found.';
                        } else {
                            exitCodeMessage = 'A system error occurred.';
                        };
                        return '<strong>Date & time of run:</strong> '
                            + getDateAndTimeOfRun(obj.data.x)
                            + '<br><strong>'
                            + obj.data.key
                            + ':</strong> '
                            + obj.data.y
                            + ' seconds<br><strong>Exit code:</strong> '
                            + getExitCode(obj.index)
                            + ' - '
                            + exitCodeMessage
                            + '<br><br>Click for more details.';
                    });

                    timingChart.multibar.dispatch.on('elementClick', function(element) {
                        var uriTemplate = '{{ path('testresults.show', {'testresultId': 'placeholder'}) }}';
                        window.open(
                            uriTemplate.replace('placeholder', getId(element.index)),
                            '_blank'
                        );
                    });

                    nv.utils.windowResize(timingChart.update);

                    return timingChart;
                });
                
                var refresh = function(offset = 0) {
                    jQuery.ajax({
                      url: ("{{ path('testresults.index', {'testcaseId': 'REPLACE-ME'}) }}?offset=" + offset).replace('REPLACE-ME', testcaseId),
                      type: "get",
                      dataType: "json",
                      success: function(values) {
                        testresults = values.reverse();
                        
                        
                        var numberOf200Values = testresults.map(function (testresult, index) {
                            return {'x': index, 'y': testresult.numberOf200};
                        });

                        var numberOf400Values = testresults.map(function (testresult, index) {
                            return {'x': index, 'y': testresult.numberOf400};
                        });

                        var numberOf500Values = testresults.map(function (testresult, index) {
                            return {'x': index, 'y': testresult.numberOf500};
                        });

                        var runtimeValues = testresults.map(function(testresult, index) {
                            if (testresult.runtimeMilliseconds === null) {
                                return {'x': index, 'y': -1.00}; // We don't have any statistics yet, but we need to show something.
                            } else {
                                 return {'x': index, 'y': (testresult.runtimeMilliseconds / 1000).toFixed(2)};
                            }
                        });

                        requestData[0].values = numberOf200Values;
                        requestData[1].values = numberOf400Values;
                        requestData[2].values = numberOf500Values;
                        
                        timingData[0].values = runtimeValues;                        
                        
                        requestChart.update();
                        timingChart.update();
                      }
                    });
                }
                
                refresh();
            
                return refresh;
            }
        };

    </script>

    {{ parent() }}

{% endblock %}


{% block body %}
    <main>
        <div class="container">
            <div class="row">
                <div class="col-xs-12">
                    <h4>Your testcases</h4>
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="panel panel-info">
                                <p class="panel-body">
                                    Hover over (on mobile: tap) each block in the timeline for
                                    access to the Selenium <b>logs</b>, web performance
                                    <b>metrics</b> (detailed waterfall for each page requested), and
                                    failure <b>screenshots</b>.
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="pagenav">
                        <a class="pull-right" {% if (not isDemoMode) %} href="{{ path('testcases.new') }}" {% else %} data-toggle="tooltip" data-placement="top" title="Not available in demo mode" {% endif %}>ï¼‹ Add another testcase</a>
                    </div>

                    <table class="table testcases">
                        {{ include('AppBundle:testcases:_testcases-list.html.twig') }}
                    </table>
                </div>
            </div>
        </div>
    </main>

{% endblock %}

{% block javascripts_additional %}
{% endblock %}
